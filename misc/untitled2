//Dependencies
var express = require('express'),
	app = express(),
	bodyParser = require('body-parser');
	hbs = require('hbs'),
	mongoose = require('mongoose'),

	cookieParser = require('cookie-parser'),
	session = require('express-session'),
	passport = require('passport'),
	LocalStrategy = require('passport-local').Strategy;


//middleware
//configure body-parser for form data
app.use(bodyParser.urlencoded({ extended: true}));

//use public folder for static files
app.use(express.static(__dirname + '/public'));	

//set hbs to view engine*
app.set('view engine', 'hbs');
//set-up partials
hbs.registerPartials(__dirname + '/views/partials');	

//connect to mongodb
mongoose.connect(
	process.env.MONGOLAB_URI ||
	process.env.MONGOHQ_URL ||
	'mongodb://localhost/neo-app'
	); 

//require Neo model
var User = require('./views/models/user');

//AUTH middleware
app.use(cookieParser());
app.use(session({
	secret: 'supersecretkey',
	resave: false,
	saveUnititialized: false
}));

app.use(passport.initialize());
app.use(passport.session());

//passport config
//passport.use(new LocalStrategy(User.authenticate()));
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserialize);


//Mock home route
app.get('/', function (req, res){
	res.render('index');
});

//AUTH ROUTES

//show signup view
app.get('/signup', function (req, res) {
	if(req.user){
		res.redirect('/userhome');
	} else { 
		res.render('signup', {user: req.user });
	}
});

//sign up new user, then log them in
//hash and salt password, saves new user to db
app.post('/signup', function (req, res){
	if (req.user) {
		res.redirect('/userhome');
	} else {
		User.register(new User({ username: req.body.username}), req.body.password, 
				function (err, newUser){
				passport.authenticate('local')(req, res, function () {
					res.redirect('/profile');
				});
			}
		);
	}
});



app.get('/userhome', function (req, res) {
	res.render('userhome');
});



/*//NASA neo get
//NASA API SEARCH
//base url for NASA neo API
var baseUrl = "https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-11-27&end_date=2015-11-29&api_key=KjIyXoQcYUWnl10kdwABKaIVU65Hiy8vvlW44Y77";
//where on page results will be appended to
var $results = $('#neos-list');
//render helper function
var render = function () {
	var neoHtml = template({neos: allNeos});
	$results.append(neoHtml);
};*/

/*//get neos from NASA api
$.get(baseUrl, function (data){
	//console.log(data);
	allNeos = data.near_earth_objects["2015-11-27"];
	console.log(allNeos);
	render();
});*/






//api routes
app.get('/api/neos', function	(req, res){
		//allNeos is taco, but comming out of our database
	Neo.find(function (err, allNeos) {
		res.json({ neos: allNeos });
	});
	
});
/*baseUrl = "https://api.nasa.gov/neo/rest/v1/feed?start_date=2015-11-27&end_date=2015-11-28&api_key=KjIyXoQcYUWnl10kdwABKaIVU65Hiy8vvlW44Y77";
app.get(baseUrl, function	(req, res){
		//allNeos is taco, but comming out of our database
	Neo.find(function (err, allNeos) {
		res.json({ neos: allNeos });
	});
	
});*/





//start server 
app.listen(process.env.PORT || 4000, function() {	
	console.log('listening on 4000');
});
